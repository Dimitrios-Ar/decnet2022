torch.Size([8, 3, 352, 608]) torch.Size([8, 1, 352, 608]) torch.Size([8, 1, 352, 608])
normalized_batch_sze torch.Size([8, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
normalized_batch_sze torch.Size([8, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
img_normalizedshape torch.Size([1, 1, 352, 608])
torch.Size([8, 352, 3, 608])
torch.Size([8, 1, 352, 608])
torch.Size([8, 1, 352, 608])
/home/robotlabx/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torchvision/transforms/functional.py:165: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /pytorch/torch/csrc/utils/tensor_numpy.cpp:180.)
  img = torch.as_tensor(np.asarray(pic))
/home/robotlabx/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)
  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)
Traceback (most recent call last):
  File "enet_sanity.py", line 346, in <module>
    pred = model(batch_data)
  File "/home/robotlabx/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/robotlabx/Desktop/DTAI/decnet2022/src/models/penet2021/penet2021_model.py", line 155, in forward
    rgb_feature = self.rgb_conv_init(torch.cat((rgb, d), dim=1))
